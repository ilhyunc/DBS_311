Q1: Write a query to display the tomorrow’s date in the following format:
     January 10th of year 2019
the result will depend on the day when you RUN/EXECUTE this query.  Label the column “Tomorrow”.

A1 : SELECT TO_CHAR(TRUNC(SYSDATE) + 1, 'FMMonth DD' -- "Month"에 적용할 때 "FMMonth"는 월 이름 앞에 선행 공백이 없도록 합니다. 기본적으로 Oracle은 형식화된 출력을 정렬하기 위해 선행 공백을 포함합니다
  || CASE WHEN TO_CHAR(TRUNC(SYSDATE) + 1, 'DD') IN ('01', '21', '31') THEN 'st'
          WHEN TO_CHAR(TRUNC(SYSDATE) + 1, 'DD') IN ('02', '22') THEN 'nd'
          WHEN TO_CHAR(TRUNC(SYSDATE) + 1, 'DD') IN ('03', '23') THEN 'rd'
          ELSE 'th'
     END
  || ' "of year" YYYY') AS Tomorrow
FROM dual; 
--FROM dual 구문은 Oracle SQL에서 단일 행을 생성하기 위한 일반적인 방법입니다. Oracle에서는 모든 쿼리에 결과를 생성할 수 있는 테이블이 필요하며, 
  dual은 그 용도로 사용되는 가상의 테이블입니다.
  dual 테이블은 단일 행, 단일 열을 가지며, 어떠한 실제 데이터도 포함하지 않습니다. 주로 함수의 반환값이나 테스트 목적으로 사용됩니다. 
  예를 들어, SYSDATE 함수를 실행하여 현재 날짜와 시간을 가져오려면 FROM dual 구문을 사용하여 결과를 생성해야 합니다.
  따라서, 위의 예시 쿼리에서 FROM dual 구문은 SYSDATE 함수의 결과를 단일 행으로 생성하기 위해 사용됩니다. 이를 통해 단일 행의 결과 집합을 반환할 수 있게 됩니다.

Q2: For each product in category 2, 3, and 5, show product ID, product name, list price, and the new list price increased by 2%. Display a new list price as a whole number.
In your result, add a calculated column to show the difference of old and new list prices.

SELECT
  p.product_id,
  p.product_name,
  p.list_price,
  ROUND(p.list_price * 1.02) AS new_list_price,
  ROUND(p.list_price * 1.02) - p.list_price AS price_difference
FROM
  PRODUCT_CATEGORIES pc JOIN PRODUCTS p ON pc.category_id = p.category_id
WHERE pc.category_id IN (2, 3, 5);


Q3: For employees whose manager ID is 2, write a query that displays the employee’s Full Name and Job Title in the following format:
SUMMER, PAYNE is Public Accountant.

SELECT first_name ||', '|| last_name AS full_name,
  job_title
FROM
  employees 
WHERE
  manager_id = 2;


-- Q4: For each employee hired before October 2016, display the employee’s last name,
 hire date and calculate the number of YEARS between TODAY and the date the employee was hired.

 -- Q4 SOLUTION --
SELECT
  last_name,
  hire_date,
  CEIL(MONTHS_BETWEEN(SYSDATE, hire_date) / 12) AS YEARS
FROM
  employees
WHERE
  hire_date < TO_DATE('October 2016', 'Month YYYY')
ORDER BY
  years;


-- Q6: For all warehouses, display warehouse id, warehouse name, city, and state. For warehouses with the null value for the state column, display “unknown”.
-- Q6 SOLUTION --
SELECT
  w.warehouse_id,
  w.warehouse_name,
  l.city,
  NVL(l.state, 'unknown') AS state,
  l.country_id
FROM warehouses w JOIN locations l ON w.location_id = l.location_id;
